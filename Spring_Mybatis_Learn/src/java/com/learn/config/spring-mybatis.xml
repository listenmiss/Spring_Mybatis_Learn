<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx" 
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="
http://www.springframework.org/schema/beans 
http://www.springframework.org/schema/beans/spring-beans.xsd 
http://www.springframework.org/schema/tx 
http://www.springframework.org/schema/tx/spring-tx.xsd
http://www.springframework.org/schema/aop 
http://www.springframework.org/schema/aop/spring-aop.xsd
">

	<!-- JNDI方式配置数据源 -->
	<!-- <bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean"> <property name="jndiName" value="${jndiName}"></property> </bean> -->

   <!-- 1. 数据源 : DriverManagerDataSource --> 
	<bean name="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">  
             <property name="driverClassName" value="${jdbc.driverClassName}" />  
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>
    <!--  
        2. mybatis的SqlSession的工厂: SqlSessionFactoryBean dataSource:引用数据源  
  
        MyBatis定义数据源,同意加载配置  
    --> 
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />

                <!-- 指定sqlMapConfig总配置文件，订制的environment在spring容器中不在生效-->  
                <property  name="configLocation"  value="classpath:com/learn/config/mybatis-config.xml"/>  
                <!--指定实体类映射文件，可以指定同时指定某一包以及子包下面的所有配置文件，mapperLocations和configLocation 有一个即可，当需要为实体类指定别名时，可指定configLocation属性，再在mybatis总配置文件中采用mapper引入实体类映射文件 -->  
                 <!--<property  name="mapperLocations"  value="classpath:com/learn/mapper/*.xml""/>-->  
	</bean>
    <!--  
        3. mybatis自动扫描加载Sql映射文件/接口 : MapperScannerConfigurer sqlSessionFactory  
  
        basePackage:指定sql映射文件/接口所在的包（自动扫描）  
    --> 
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.learn.dao" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
    </bean>

    <!-- 
        4. 事务管理 : DataSourceTransactionManager dataSource:引用上面定义的数据源 
    -->  
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
    


    <!-- 5. 方法一：使用声明式事务  XML
       <tx:advice>：事务通知定义，用于指定事务属性"transaction-manager"属性指定事务管理器，
       并通过< tx:attributes >指定具体需要拦截的方法;
       <tx:advice>：id用于指定此通知的名字，
       <tx:method>：用于定义事务属性即相关联的方法名
        rollback-for：需要触发回滚的异常定义，以“，”分割；
       no-rollback-for：不被触发进行回滚的 Exception(s)；以“，”分割；
    -->
    <tx:advice id="transactionAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!--<tx:method name="add*" propagation="REQUIRED" isolation="READ_COMMITTED" timeout="-1" read-only="false" no-rollback-for="" rollback-for=""/>-->
            <tx:method name="add*" propagation="REQUIRED" />
            <tx:method name="append*" propagation="REQUIRED" />
            <tx:method name="insert*" propagation="REQUIRED" />
            <tx:method name="save*" propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED" />
            <tx:method name="modify*" propagation="REQUIRED" />
            <tx:method name="edit*" propagation="REQUIRED" />
            <tx:method name="delete*" propagation="REQUIRED" />
            <tx:method name="remove*" propagation="REQUIRED" />
            <tx:method name="repair" propagation="REQUIRED" />
            <tx:method name="delAndRepair" propagation="REQUIRED" />

            <tx:method name="get*" propagation="SUPPORTS" />
            <tx:method name="find*" propagation="SUPPORTS" />
            <tx:method name="load*" propagation="SUPPORTS" />
            <tx:method name="search*" propagation="SUPPORTS" />
            <tx:method name="datagrid*" propagation="SUPPORTS" />

            <!--<tx:method name="*" propagation="SUPPORTS" />-->
        </tx:attributes>
    </tx:advice>
    
    
            <!-- 5. 方法二：声明式事务 注解方式方式，引入tx 命名空间,启用事务注解  -->
         <tx:annotation-driven transaction-manager="transactionManager"/>
    <!--配置AOP-->
    <aop:config>
        <!--配置切点表达式-->
        <aop:pointcut id="transactionPointcut" expression="execution(* com.learn.service.impl..*.*(..))" />
        <!-- <aop:advisor>：Advisor定义，其中切入点为transactionPointcut，通知为txAdvice。 -->
        <aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice" />
        <!--以上是配置声明式事务的-->
        
        
<!--              
         配置切面及通知 
		<aop:aspect ref="loggingAspect" order="2">
                     <aop:pointcut id="testPointcut" expression="execution(* com.learn.aop.xml.ArithmeticCalculator*.*(..))" />
			<aop:before method="beforeMethod" pointcut-ref="testPointcut"/>
			<aop:after method="afterMethod" pointcut-ref="testPointcut"/>
			<aop:after-throwing method="afterThrowing" pointcut-ref="testPointcut" throwing="e"/>
			<aop:after-returning method="afterReturning" pointcut-ref="testPointcut" returning="result"/>
			  
			<aop:around method="aroundMethod" pointcut-ref="pointcut"/>
			
		</aop:aspect>	
		<aop:aspect ref="vlidationAspect" order="1">
                     <aop:pointcut id="testPointcut" expression="execution(* com.learn.aop.xml.ArithmeticCalculator*.*(..))" />
			<aop:before method="validateArgs" pointcut-ref="testPointcut"/>
		</aop:aspect>-->
        
    </aop:config>







         
         
  
 
</beans>